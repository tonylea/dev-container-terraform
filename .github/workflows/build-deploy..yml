name: Deploy Images to GHCR

env:
  ARTIFACT_NAME: "image"
  IMAGE_NAME: "devcontainer-terraform"
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
  pull_request:
    types: [closed]

jobs:
  # test:
  #   name: MegaLinter
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Git Checkout
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
  #         fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances

  #     # MegaLinter
  #     - name: MegaLinter
  #       id: ml
  #       # You can override MegaLinter flavor used to have faster performances
  #       # More info at https://megalinter.io/flavors/
  #       uses: oxsecurity/megalinter@v6
  #       env:
  #         # All available variables are described in documentation
  #         # https://megalinter.io/configuration/
  #         VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
  #         # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks

  #     # Upload MegaLinter artifacts
  #     - name: Archive production artifacts
  #       if: ${{ success() }} || ${{ failure() }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: MegaLinter reports
  #         path: |
  #           megalinter-reports
  #           mega-linter.log

  #     # Create pull request if applicable (for now works only on PR from same repository, not from forks)
  #     - name: Create Pull Request with applied fixes
  #       id: cpr
  #       if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #       uses: peter-evans/create-pull-request@v4
  #       with:
  #         token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
  #         commit-message: "[MegaLinter] Apply linters automatic fixes"
  #         title: "[MegaLinter] Apply linters automatic fixes"
  #         labels: bot
  #     - name: Create PR output
  #       if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

  #     # Push new commit if applicable (for now works only on PR from same repository, not from forks)
  #     - name: Prepare commit
  #       if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #       run: sudo chown -Rc $UID .git/
  #     - name: Commit and push applied linter fixes
  #       if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
  #       uses: stefanzweifel/git-auto-commit-action@v4
  #       with:
  #         branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
  #         commit_message: "[MegaLinter] Apply linters fixes"
  #         commit_user_name: megalinter-bot
  #         commit_user_email: nicolas.vuillamy@ox.security

  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          push: false
          context: ./src
          tags: tonylea/${{env.IMAGE_NAME}}:latest
          outputs: type=docker,dest=/tmp/${{env.IMAGE_NAME}}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: /tmp/${{env.IMAGE_NAME}}.tar

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/${{env.IMAGE_NAME}}.tar

  #   defaults:
  #     run:
  #       working-directory: "./src"
  #   steps:
  #     - name: "Checkout GitHub Action"
  #       uses: actions/checkout@main

  #     - name: "Login to GitHub Container Registry"
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{github.actor}}
  #         password: ${{secrets.GITHUB_TOKEN}}

  #     - name: "Build Inventory Image"
  #       run: |
  #         docker push tonylea/${{env.IMAGE_NAME}}:latest

  #     - uses: actions/checkout@v2
  #     - name: Configure committer
  #       run: |
  #         git config user.name "GitHub Actions Bot"
  #         git config user.email "gitbot@fakeemail.com"

  #     - name: "Update version"
  #       run: |
  #         npm install -g standard-version
  #         standard-version
  #         git push --follow-tags origin HEAD:main

  #     - name: Build the Docker image
  #       run: |
  #         docker tag tonylea/${{env.IMAGE_NAME}}:latest tonylea/${{env.IMAGE_NAME}}::${{github.ref_name}}
  #         docker push tonylea/${{env.IMAGE_NAME}}:${{github.ref_name}}
