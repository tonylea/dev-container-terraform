name: Deploy Images to GHCR

env:
  ARTIFACT_NAME: "image"
  IMAGE_NAME: "devcontainer-terraform"
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
  pull_request:
    types: [closed]

jobs:
  build:
    # if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          push: false
          context: ./src
          tags: tonylea/${{env.IMAGE_NAME}}:latest
          outputs: type=docker,dest=/tmp/tonylea/${{env.IMAGE_NAME}}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: /tmp/${{env.IMAGE_NAME}}.tar

  deploy:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tonylea/${{env.IMAGE_NAME}}.tar

      - uses: actions/checkout@v2
      - name: Configure committer
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "gitbot@fakeemail.com"

      - name: "Update version"
        run: |
          npm install -g standard-version
          standard-version
          git push --follow-tags origin HEAD:main

      - name: Push image
        run: |
          docker push tonylea/${{env.IMAGE_NAME}}:latest
          docker tag tonylea/${{env.IMAGE_NAME}}:latest tonylea/${{env.IMAGE_NAME}}::${{github.ref_name}}
          docker push tonylea/${{env.IMAGE_NAME}}:${{github.ref_name}}
